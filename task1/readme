

Build
---------------------
1. clone vpf
    git clone git@github.com:NVIDIA/VideoProcessingFramework.git

2. Download Video Codec SDK from NVIDIA site
https://developer.nvidia.com/nvidia-video-codec-sdk/download

3. bash build_vpf.sh

get video to play
5. wget http://themazzone.com/big_buck_bunny_1080p_h264.mov
6. bash run.sh


cmdline args
---------------------
main script: my.py
run.sh          - used to run locally
_run_stgage02.sh - run on node_stage02

You can edit cmdline in run.sh or _run_stgage02.sh

arguments:

mandatory:
    input - path to video file or rtsp stream to play

optional:
    --encode            attach encoder to pipeline
    --parse             attach bitstream parser to pipeline, allows NALU detection/extraction
    --single_file <filename>   write transcoded bitstream to file
    --out <dir>         split transcoded bitstream to individual NALU frames and write each to separate file in the folder
    --gpuid <int>       gpuid to run on
    --avg_len           length of the buffer for fps averaging
    --avg_nalu_len      length of the buffer for NALU size averaging
    --print_size        print size stats of NALU
    --conf <key> <value> encoder parameters, see https://developer.nvidia.com/blog/vpf-hardware-accelerated-video-processing-framework-in-python/

Examples:

hw decode and count fps (no write)
    python3.6 my.py big_buck_bunny_1080p_h264.mov

hw decode+encode and count fps infinitely (no write) with explicit preset & bitrate & gop
    python3.6 my.py big_buck_bunny_1080p_h264.mov --loop --encode --conf preset hp --conf bitrate 5M --conf gop 1

transcode & write to single file & print NALU size stats 
    python3.6 my.py big_buck_bunny_1080p_h264.mov --encode --parse --print_size --single_file bitstream.h264

transcode & write each frame to separate file into foldre1
    python3.6 my.py big_buck_bunny_1080p_h264.mov --encode --parse --out folder1

decode & write each frame to separate JPEG file into foldre1
    python3.6 my.py big_buck_bunny_1080p_h264.mov --out folder1

decode stream
    python3.6 my.py rtsp://test:test@192.168.250.110/axis-media/media.amp
